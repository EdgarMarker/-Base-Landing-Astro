---
import "../../styles/page.css";
import "@splidejs/react-splide/css";
import { getDataPage, getDataPageBySlug } from "../../_data/page";
import type { Page } from "../../_types/page";
import Layout from "../../layouts/Layout.astro";
import ScrollSmootherProvider from "../../_lib/gsap/ScrollSmootherProvider";
import Nav from "../../components/nav/Nav.astro";
import PortableTextCustom from "../../components/ui/portableText/PortableTextCustom";
import { Picture } from "astro:assets";
import LightBox from "../../components/ui/lightbox/LightBox";
import Footer from "../../components/footer/Footer.astro";
import type { Company } from "../../_types/company";
import { getDataCompany } from "../../_data/company";
import TabsModels from "../../components/ui/tabsModels/TabsModels.astro";

export const getStaticPaths = async () => {
  const dataPage = await getDataPage();
  return dataPage.map((page: Page) => ({
    params: { slug: page.slug.current },
  }));
};

const { slug } = Astro.params;
const dataPage: Page = await getDataPageBySlug(slug);
const dataCompany: Company = await getDataCompany();
---

<Layout
  title={dataPage.seo.title}
  desc={dataPage.seo.dsc}
  keywords={dataPage.seo.keywords}
>
  <Nav dataNav={dataPage} />
  <ScrollSmootherProvider client:only="react">
    {
      dataPage.hero.setActive && (
        <section id={dataPage.hero.nameNav} class="hero">
          <div class="column__2">
            <did class="col__left">
              <h1>{dataPage.hero.h1}</h1>
              <PortableTextCustom data={dataPage.hero.portableText} />
              <div class="btn">{dataPage.hero.btn}</div>
            </did>
            <did class="col__right">
              <Picture
                class="img"
                src={dataPage.hero.img.media.url}
                alt={dataPage.hero.img.alt.altText}
                formats={["webp", "avif"]}
                fallbackFormat="jpeg"
                inferSize={true}
                quality={"high"}
                densities={[1.5, 2]}
              />
            </did>
          </div>
        </section>
      )
    }
    {
      dataPage.intro.setActive && (
        <section id={dataPage.intro.nameNav} class="intro">
          <div class="column__2">
            <did class="col__left">
              <PortableTextCustom
                data={dataPage.intro.portableText}
                client:only="react"
              />
              <div class="btn">{dataPage.intro.btn}</div>
            </did>
            <did class="col__right">
              <Picture
                class="img"
                src={dataPage.intro.img.media.url}
                alt={dataPage.intro.img.alt.altText}
                formats={["webp", "avif"]}
                fallbackFormat="jpeg"
                inferSize={true}
                quality={"high"}
                densities={[1.5, 2]}
              />
            </did>
          </div>
        </section>
      )
    }
    {
      dataPage.divisor1.setActive && (
        <section>
          <div class="column__1">
            <Picture
              class="img"
              src={dataPage.divisor1.img.media.url}
              alt={dataPage.divisor1.img.alt.altText}
              formats={["webp", "avif"]}
              fallbackFormat="jpeg"
              inferSize={true}
              quality={"high"}
              densities={[1.5, 2]}
            />
          </div>
        </section>
      )
    }
    {
      dataPage.location.setActive && (
        <section id={dataPage.location.nameNav} class="location">
          <div class="column__2">
            <div class="col__left">
              <PortableTextCustom
                data={dataPage.location.portableText}
                client:only="react"
              />
              <div class="btn">{dataPage.location.btn}</div>
            </div>
            <div class="col__right">
              <Picture
                class="img"
                src={dataPage.location.img.media.url}
                alt={dataPage.location.img.alt.altText}
                formats={["webp", "avif"]}
                fallbackFormat="jpeg"
                inferSize={true}
                quality={"high"}
                densities={[1.5, 2]}
              />
            </div>
          </div>
        </section>
      )
    }
    {
      dataPage.amenities.setActive && (
        <section id={dataPage.amenities.nameNav} class="amenities">
          <div class="column__1">
            <PortableTextCustom
              data={dataPage.amenities.portableText}
              client:only="react"
            />
            <ul class="listado__x4" role="list">
              {dataPage.amenities.list.map((amenity) => (
                <li>
                  <p>{amenity.name}</p>
                  <Picture
                    class="img"
                    src={amenity.img.media.url}
                    alt={amenity.img.alt.altText}
                    formats={["webp", "avif", "svg"]}
                    fallbackFormat="svg"
                    inferSize={true}
                    quality={"high"}
                    densities={[1.5, 2]}
                  />
                </li>
              ))}
            </ul>
          </div>
        </section>
      )
    }
    {
      dataPage.divisor2.setActive && (
        <section>
          <div class="column__1">
            <Picture
              class="img"
              src={dataPage.divisor2.img.media.url}
              alt={dataPage.divisor2.img.alt.altText}
              formats={["webp", "avif"]}
              fallbackFormat="jpeg"
              inferSize={true}
              quality={"high"}
              densities={[1.5, 2]}
            />
          </div>
        </section>
      )
    }
    {
      dataPage.models.setActive && (
        <section id={dataPage.models.nameNav} class="models">
          <div class="column__1">
            <PortableTextCustom
              data={dataPage.models.portableText}
              client:only="react"
            />
          </div>
          <TabsModels dataPage={dataPage} />
        </section>
      )
    }
    {
      dataPage.testy.setActive && (
        <section id={dataPage.testy.nameNav} class="testy">
          <div class="column__1">
            <PortableTextCustom
              data={dataPage.testy.portableText}
              client:only="react"
            />
            <div
              id="splide-testy"
              class="splide"
              role="group"
              aria-label="Splide Basic HTML Example"
            >
              <div class="splide__track">
                <ul class="splide__list">
                  {dataPage.testy.list.map((item) => (
                    <li class="splide__slide card card__testy">
                      <Picture
                        class="img"
                        src={item.img.media.url}
                        alt={item.img.alt.altText}
                        formats={["webp", "avif", "jpg"]}
                        fallbackFormat="jpg"
                        inferSize={true}
                        quality={"high"}
                        densities={[1.5, 2]}
                      />
                      <div>
                        <h3>{item.name}</h3>
                        <p>{item.text}</p>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
        </section>
      )
    }
    {
      dataPage.gallery.setActive && (
        <section id={dataPage.gallery.nameNav} class="gallery">
          <div class="column__1">
            <PortableTextCustom
              data={dataPage.gallery.portableText}
              client:only="react"
            />
            <LightBox
              client:only="react"
              images={dataPage.gallery.list.map((img) => ({
                src: img.media.url,
                alt: img.alt.altText,
              }))}
            >
              <ul class="listado__x4" role="list">
                {dataPage.gallery.list.map((img) => (
                  <li>
                    <Picture
                      class="img"
                      src={img.media.url}
                      alt={img.alt.altText}
                      formats={["webp", "avif", "jpg"]}
                      fallbackFormat="jpg"
                      inferSize={true}
                      quality={"high"}
                      densities={[1.5, 2]}
                    />
                  </li>
                ))}
              </ul>
            </LightBox>
          </div>
        </section>
      )
    }
    <Footer />
  </ScrollSmootherProvider>
</Layout>
<script src="../../scripts/mountSplide.js"></script>
<script define:vars={{ colors: dataCompany.colors }}>
  document.addEventListener("DOMContentLoaded", () => {
    const {
      primary,
      primaryLight,
      primaryDark,
      secondary,
      secondaryLight,
      secondaryDark,
      accent,
    } = colors;

    const style = document.createElement("style");
    style.textContent = `
            :root {
              --color-primary: ${primary.hex};
              --color-primaryLight: ${primaryLight.hex};
              --color-primaryDark: ${primaryDark.hex};
              --color-secondary: ${secondary.hex};
              --color-secondaryLight: ${secondaryLight.hex};
              --color-secondaryDark: ${secondaryDark.hex};
              --color-accent: ${accent.hex};
            }
          `;
    document.head.appendChild(style);
  });
</script>
